using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authorization.Policy;
using Microsoft.Extensions.Options;
using Lib.AspNetCore.ServerSentEvents.Internals;
using Microsoft.Extensions.Primitives;
using System.Linq;
using Microsoft.Extensions.Logging;

namespace Lib.AspNetCore.ServerSentEvents
{
    /// <summary>
    /// Middleware which provides support for Server-Sent Events protocol.
    /// <typeparam name="TServerSentEventsService">The type of <see cref="ServerSentEventsService"/> which will be used by the middleware instance.</typeparam>
    /// </summary>
    public class ServerSentEventsMiddleware<TServerSentEventsService> where TServerSentEventsService : ServerSentEventsService
    {
        #region Fields
        private readonly RequestDelegate _next;
        private readonly IAuthorizationPolicyProvider _policyProvider;
        private readonly TServerSentEventsService _serverSentEventsService;
        private readonly ServerSentEventsOptions _serverSentEventsOptions;
        private readonly ILogger _logger;

        private AuthorizationPolicy _authorizationPolicy;
        #endregion

        #region Constructor
        /// <summary>
        /// Initializes new instance of middleware.
        /// </summary>
        /// <param name="next">The next delegate in the pipeline.</param>
        /// <param name="policyProvider">The service which can provide an <see cref="AuthorizationPolicy" />.</param>
        /// <param name="serverSentEventsService">The service which provides operations over Server-Sent Events protocol.</param>
        /// <param name="serverSentEventsOptions"></param>
        /// <param name="logger"></param>
        public ServerSentEventsMiddleware(RequestDelegate next, IAuthorizationPolicyProvider policyProvider, TServerSentEventsService serverSentEventsService, IOptions<ServerSentEventsOptions> serverSentEventsOptions, ILogger<ServerSentEventsMiddleware<TServerSentEventsService>> logger)
        {
            _next = next ?? throw new ArgumentNullException(nameof(next));
            _policyProvider = policyProvider ?? throw new ArgumentNullException(nameof(policyProvider));
            _serverSentEventsService = serverSentEventsService ?? throw new ArgumentNullException(nameof(serverSentEventsService));
            _serverSentEventsOptions = serverSentEventsOptions?.Value ?? throw new ArgumentNullException(nameof(serverSentEventsOptions));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }
        #endregion

        #region Methods
        /// <summary>
        /// Process an individual request.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="policyEvaluator">The service which can evaluate an <see cref="AuthorizationPolicy" />.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public async Task Invoke(HttpContext context, IPolicyEvaluator policyEvaluator)
        {
            if (context.Request.Headers[Constants.ACCEPT_HTTP_HEADER] == Constants.SSE_CONTENT_TYPE)
            {
                if (!await AuthorizeAsync(context, policyEvaluator))
                {
                    _logger.LogWarning($"AuthorizeAsync returned false for context.User.Identity.Name: {context.User?.Identity?.Name}");
                    return;
                }
                bool shouldAccept = context.ShouldAccept(_serverSentEventsOptions.OnShouldAccept);
                if (!shouldAccept) {
                    _logger.LogWarning($"ShouldAccept returned false for context.User.Identity.Name: {context.User?.Identity?.Name}");
                    return;
                } 

                DisableResponseBuffering(context);

                HandleContentEncoding(context);

                await context.Response.AcceptAsync(_serverSentEventsOptions.OnPrepareAccept);

                // Use an autogenerated Guid, useful if not using authentication.
                //ServerSentEventsClient client = new ServerSentEventsClient(Guid.NewGuid(), context.User, context.Response);
                
                // Set the Guid later to provide the opportunity for the Guid to be set by user code in the ClientConnected event hander
                // Useful when using Authentication to allow the client to be associated with a user.
                ServerSentEventsClient client = new ServerSentEventsClient(context.User, context.Response, _logger);
                _logger.LogDebug($"Client Created: ConnectedAt: {client.ConnectedAt} User.Identity.Name: {client.User?.Identity?.Name}");

                if (_serverSentEventsService.ReconnectInterval.HasValue)
                {
                    await client.ChangeReconnectIntervalAsync(_serverSentEventsService.ReconnectInterval.Value, CancellationToken.None);
                }

                await ConnectClientAsync(context.Request, client);

                await context.RequestAborted.WaitAsync();

                await DisconnectClientAsync(context.Request, client);
            }
            else
            {
                await _next(context);
            }
        }

        private async Task<bool> AuthorizeAsync(HttpContext context, IPolicyEvaluator policyEvaluator)
        {
            bool authorized = false;

            if (_serverSentEventsOptions.Authorization is null)
            {
                authorized = true;
            }
            else
            {
                if (_authorizationPolicy is null)
                {
                    _authorizationPolicy = await AuthorizationPolicy.CombineAsync(_policyProvider, new[] { _serverSentEventsOptions.Authorization });
                }

                AuthenticateResult authenticateResult = await policyEvaluator.AuthenticateAsync(_authorizationPolicy, context);
                PolicyAuthorizationResult authorizeResult = await policyEvaluator.AuthorizeAsync(_authorizationPolicy, authenticateResult, context, null);

                if (authorizeResult.Challenged)
                {
                    await ChallengeAsync(context);
                }
                else if (authorizeResult.Forbidden)
                {
                    await ForbidAsync(context);
                }
                else
                {
                    authorized = true;
                }
            }

            return authorized;
        }

        private async Task ChallengeAsync(HttpContext context)
        {
            if (_authorizationPolicy.AuthenticationSchemes.Count > 0)
            {
                foreach (string authenticationScheme in _authorizationPolicy.AuthenticationSchemes)
                {
                    await context.ChallengeAsync(authenticationScheme);
                }
            }
            else
            {
                await context.ChallengeAsync();
            }
        }

        private async Task ForbidAsync(HttpContext context)
        {
            if (_authorizationPolicy.AuthenticationSchemes.Count > 0)
            {
                foreach (string authenticationScheme in _authorizationPolicy.AuthenticationSchemes)
                {
                    await context.ForbidAsync(authenticationScheme);
                }
            }
            else
            {
                await context.ForbidAsync();
            }
        }

        private void DisableResponseBuffering(HttpContext context)
        {
            IHttpBufferingFeature bufferingFeature = context.Features.Get<IHttpBufferingFeature>();
            if (bufferingFeature != null)
            {
                bufferingFeature.DisableResponseBuffering();
            }
        }

        private void HandleContentEncoding(HttpContext context)
        {
            context.Response.OnStarting(() =>
            {
                if (!context.Response.Headers.ContainsKey(Constants.CONTENT_ENCODING_HEADER))
                {
                    context.Response.Headers.Append(Constants.CONTENT_ENCODING_HEADER, Constants.IDENTITY_CONTENT_ENCODING);
                }

                return Task.CompletedTask;
            });
        }

        private async Task ConnectClientAsync(HttpRequest request, ServerSentEventsClient client)
        {
            string lastEventId = request.Headers[Constants.LAST_EVENT_ID_HTTP_HEADER];
            if (String.IsNullOrWhiteSpace(lastEventId)) {
                // Try and get from the query string, one of the popular polyfills last event id on the query string
                StringValues values;            
                bool success = request.Query.TryGetValue("lastEventId", out values);
                lastEventId = values.FirstOrDefault();
            }
            client.LastEventId = lastEventId;
            if (!String.IsNullOrWhiteSpace(lastEventId))
            {
                await _serverSentEventsService.OnReconnectAsync(request, client, lastEventId);
                _logger.LogInformation($"Client Reconnected: {client.ToString()}");
            }
            else
            {
                await _serverSentEventsService.OnConnectAsync(request, client);
                _logger.LogInformation($"Client Connected: {client.ToString()}");
            }
            _serverSentEventsService.AddClient(client);
            _logger.LogInformation($"Connected Client Count: {_serverSentEventsService.GetClientCount()}");
        }

        private async Task DisconnectClientAsync(HttpRequest request, ServerSentEventsClient client)
        {
            _serverSentEventsService.RemoveClient(client);
            _logger.LogInformation($"Client Disconnected: {client.ToString()}");
            await _serverSentEventsService.OnDisconnectAsync(request, client);
            _logger.LogInformation($"Connected Client Count: {_serverSentEventsService.GetClientCount()}");
        }
        #endregion
    }
}
